openapi: 3.0.1
info:
  title: users-api
  description: gabboo users api
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: Users
    description: Users endpoint
  - name: Specification
    description: The swagger API specification
paths:
  /users:
    get:
      tags:
        - Users
      description: Fetch all users
      responses:
        200:
          description: Returns all users
          content: {}
    post:
      tags:
        - Users
      description: Create a new user
      requestBody:
        description: a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBody'
        required: true
      responses:
        200:
          description: Returns newly created user
          content: {}
  /users/{id}:
    put:
      tags:
        - Users
      description: Updates an existing user
      parameters:
        - name: id
          in: path
          description: The id of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBody'
        required: true
      responses:
        200:
          description: Returns updated user
          content: {}
    delete:
      tags:
        - Users
      description: Deletes an existing user
      parameters:
        - name: id
          in: path
          description: The id of the user to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns boolean whether delete is successful or not
          content: {}
  /users/id/{id}:
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the user with the specified id
          content: {}
        404:
          description: User not found
          content: {}
  /users/{username}:
    get:
      tags:
        - Users
      parameters:
        - name: username
          in: path
          description: The username of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the user with the specified id
          content: {}
        404:
          description: User not found
          content: {}
  /users/credentials:
    get:
      tags:
        - Users
      parameters:
        - name: username
          in: query
          description: The username of the user to retrieve
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the user with the specified id
          content: {}
        404:
          description: User not found
          content: {}
  /users/{username}/password:
    put:
      tags:
        - Users
      description: Updates an existing user's password
      parameters:
        - name: username
          in: path
          description: The username of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: change password request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
        required: true
      responses:
        200:
          description: Returns updated user
          content: {}
  /users/{username}/avatar:
    put:
      tags:
        - Users
      description: Updates an existing user's avatar image
      parameters:
        - name: username
          in: path
          description: The username of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: change password request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
        required: true
      responses:
        200:
          description: Returns updated user
          content: {}
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}
components:
  schemas:
    UserBody:
      title: user
      required:
        - username
        - email
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        description:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        mobile:
          type: string
        password:
          type: string
        avatarUrl:
          type: string
        profileBackgroundUrl:
          type: string
    ChangePasswordBody:
      title: changePasswordRequest
      required:
        - username
        - oldPassword
        - newPassword
      type: object
      properties:
        username:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string
    UserVoteBody:
      title: userVoteRequest
      required:
        - recipientUsername
        - senderUsername
        - chatGroupId
      type: object
      properties:
        recipientUsername:
          type: string
        senderUsername:
          type: string
        chatGroupId:
          type: string
